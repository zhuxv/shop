<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    protected $fillable = ['name','is_directory','level','path'];

    protected $casts = [
        'is_directory' => 'boolean',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        // 监听 Category 的创建事件, 用于初始化 path 和 level 字段值
        static::creating(function (Category $category){
            // 如果创建的是一个根目录
            if ( is_null($category->parent_id) ) {
                // 将层级设置为0
                $category->level = 0;
                // 将path 设置为空
                $category->path = '';
            } else {
                // 将层级设为父类目的层级 +1
                $category->level = $category->parent->level+1;
                // 将 path 值设置为父类目的 path 追加父类目 ID
                $category->path = $category->parent->path.($category->parent->path?',':'').$category->parent_id;
            }
        });
    }

    public function parent()
    {
        return $this->belongsTo(Category::class);
    }

    public function children()
    {
        return $this->hasMany(Category::class, 'parent_id');
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }

    /**
     * 定义一个访问器, 获取所有祖先类目的ID值
     * @return array
     */
    public function getPathIdsAttribute()
    {
        // 首先根据逗号分割为数组
        // 然后去除数组中的空值
        return array_filter(explode(',', $this->path));
    }

    /**
     * 定义一个访问器,获取所有祖先类目并按层级排序
     * @return \Illuminate\Database\Eloquent\Collection|static[]
     */
    public function getAncestorsAttribute()
    {
        return Category::query()
            // 使用上面的访问器获取所有的祖先类目id
            ->whereIn('id', $this->path_ids)
            // 并按层级排序
            ->orderBy('level')
            ->get();
    }

    /**
     * 定义一个访问器, 获取以 - 为分割的所有祖先类目名称以及当前类目的名称
     * @return mixed
     */
    public function getFullNameAttribute()
    {
        return $this->ancestors // 获取所有祖先类目
            ->pluck('name') // 取出所有祖先类目的 name 字段作为一个数组
            ->push($this->name) // 将当前类目的 name 字段值加到数组的末尾
            ->implode(' - '); // 用 - 符号将数组的值封装成一个字符串
    }

}
